Pseudocode for Multivariate Nonlinear Newton's Method Optimization
____________________________________________________________________________

Goal: Optimize a give cost function by adjusting the input on a
  statespace with the intended parameters. In other words, find the
  point where the gradient of the system of cost functions is equal
  to zero.

    C(q) -> C(u)      (cost system is indirectly controlled by u)
    J(q) -> J(u) = 0  (gradient system of equations)

  To find this point, the system and its gradient will be found by
  iterating the cost function and solving for its gradient using a
  system similar to ode45() in MATLAB (for initial testing).

  Needed Parameters:
    System of equations for cost.
    Method of calculating gradient for cost function.

  When J(u) is calculated, the next step of the Newton's method is...
    U = u - C(u) / J(u)
  where U is the new input value to be iterated on.
____________________________________________________________________________

Optimization Method: Newton's Optimization Method
Target: Minimum cost input for system C(u)

01| create initial guess (set to uc)
02| calculate cost of initial guess (Cc)
03| calculate gradient around initial guess (Jc)
04| calculate the next guess (un = uc - Inv(Jc)*Cc)
05| while (difference between un and uc is large)
06|   repeat steps 1-4
  | end while
07| return the acceptable inputs (u = un)
____________________________________________________________________________

Method: Finite Difference Method
Target: Gradient Matrix

1| initialize current state and guess input
2| calculate cost of current state with guess input
3| for (number of costs)
4|   for (number of inputs)
5|     calculate the cost for small change in input (around guess)
 |   end for
6|   calculate partial derivatives for each cost/input
7|   add the partial derivatives to gradient matrix
 | end for
8| return completed gradient matrix approximation
