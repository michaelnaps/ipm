Pseudocode for MPC of Multiple Input System Using Bisection Method
_________________________________________________________________________

- create model of system (predefined)
- create prediction horizon (predefined)

1). evaluate the model in the range of the prediction horizon
2). calculate cost for each component of the prediction output
3). optimal point is that where the overall cost is lowest
4). calculate the input force required to reach optimal conditions

Process with respect to input:
[q0, u] -> q(q0, u) -> C(q) -> dC(q)
such that...
dC(q) < eps
where...
q0 = initial state         q = next state
u = tested input
C = cost of state          dC = change in cost
eps = absolute tolerance
_________________________________________________________________________

Notes:
  - For multiple inputs, independent cost functions will be developed
     for each control point
  - Bisection method has calculation depth, 'O(n)', of...
      O(n) = log(n)^k
    where 'n' is the range of possible inputs and 'k' is the number
    of control points
  - Goal of the 'Parallel' calculation architecture is to adjust the
    above depth to the following...
      O(n) = k*log(n)
    which is depending on the same inputs as above.
_________________________________________________________________________

Pseudocode for Multivariate Bisection Method
Note: target is the local minimum (unknown)
      calculate until the change in cost is small

01| choose acceptable absolute tolerance (eps)
02| create initial guess for each control point (maximum torques)
03| calculate the center of each guess range
04| initialize states at current values of input (range, and centers)
05| calculate the cost of each state calculated in (04)
  |
06| while (change in cost is above error)
07|   if (sum of center cost is zero)
08|     break out of loop and exit
  |   end if
  |
10|   for (number of control points)
11|     if (cost of current input is lower than previous)
12|       update center point to new value
  |     end if
  |   end for
  |
13|   calculate the new average value for all control points
14|   calculate the new cost for next state to check
  |
15|   if (iteration count diverges)
16|     output error message and applicable data
17|     break loop
  |   end if
  |
  | end while
  |
15| return optimized inputs
