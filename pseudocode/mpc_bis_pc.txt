Pseudocode for Optimization of MPC Controller Using Bisection Method
_________________________________________________________________________

- create model of system (predefined)
- create prediction horizon (predefined)

1). evaluate the model in the range of the prediction horizon
2). calculate cost for each component of the prediction output
3). optimal point is that where the overall cost is lowest
4). calculate the input force required to reach optimal conditions

Process with respect to input:
[q0, u] -> q(q0, u) -> C(q) -> dC(q)
such that...
dC(q) < e
where...
q0 = initial state     q = next state
u = tested input
C = cost of state      dC = change in cost
e = absolute tolerance
_________________________________________________________________________

Pseudocode:
01|  create initial state variables
02|  choose input to be checked
03|  calculate the state with the initial input at
  |  the end of the desired prediction horizon (ode45)
04|  calculate the cost at the calculated state
06|  if (cost is local minimum)
07|    use the input calculated
08|    exit controller
09|  else (i.e. when cost is not local minimum)
09|    calculated the next test input from some
  |    optimization method
10|    repeat from step 2
    end if
_________________________________________________________________________

Pseudocode for Optimization Method - based from the bisection algorithm
Note: target is the local minimum (unknown)
      calculate until the change in cost is small

01|  choose acceptable absolute tolerance (e)
02|  initialize initial starting range (-um, um)
03|  initialize average of range (ave)
04|  initialize difference in values to Inf (arbitrary)
04|  while d(C) greater than e
05|    calculate the cost of steps 2 and 3 (Ca, Cb, Cave)
06|    compare the difference between Ca and Cave, and Cb and Cave
07|    if d(Ca,Cave) is greater than d(Cb,Cave)
08|      set the input b to the input ave
09|    else
10|      set the input a to the input ave
11|    calculate the new average value
12|    calculate the new Cave value
13|  end while
14|  return optimized input (input at Cave)
